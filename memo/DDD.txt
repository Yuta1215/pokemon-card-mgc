# DDD

## 概要
- ドメイン（領域）の知識に焦点を当てた開発手法
	- 開発対象のソフトウェアの問題を解決する
	- エンジニアとしてのフォーカスとしてではなく、システムの役割としてロジックを組み立てる
	
## パターン一覧
- 知識を表現
	- 値オブジェクト
	- エンティティ
	- ドメインサービス
- アプリケーションを実現
	- リポジトリ
	- アプリケーションサービス
	- ファクトリ
- 知識を表現（発展版）		
	- 集約
	- 仕様

## 値オブジェクト
### 概要
- システム固有の値を作る
- 振る舞いを持つことができる
	- 不正な値を存在させない（ロジックの散在を避ける）
	- if (name == null) -> throw new NameNotFoundException();	
	- if (name.length < 3) -> throw new NameLengthException();	
### 定義
- 不変である
	- readonlyを宣言
	- コンストラクタでプロパティを管理する
		- change()メソッドなどを行わない
- 交換が可能である	
	- 代入を可能にする
		- Sample sample = new Sample("a");
		- sample = new Sample("b");
- 等価性によって比較される
	- 比較メソッド等を組み込む

## エンティティ
### 概要
- ふるまいを持つオブジェクト
- ライフサイクルと連続性を持つ
### 定義
- 可変である
	- change()メソッドが可能
- 同じ属性であっても区別される
	- userIdなど、nameが同様でもOK
- 同一性により区別される
	- 比較はuserIdなどで行う
	
## サービス
### 概要
- 値オブジェクト・エンティティでは表現上、不自然である場合に用いられる
- ドメインオブジェクトを横断するような操作に活用される

## リポジトリ
### 概要
- オブジェクトの永続化（保存）・再構築（復元）を行う
- データストアに関する処理の差し替えを行う
	- インターフェースから拡張

## アプリケーションサービス
### 概要
- ドメインオブジェクトの協調を行う
- domain-service, repository等を呼び出し
### コマンドオブジェクト定義
- pubic class UserUpdateCommand();
- public UserUpdateCommand(string id, string name = null, string mailAddress = null);
- setterなし、getterのみ
### コマンドオブジェクト利用
- public void update(UserUpdateCommand command);
### インターフェースを実装することも可能

## 依存関係
### 概要
- オブジェクト同士の依存を解決する
### 依存関係逆転の法則
- 上位レベルのモジュールは下位レベルのモジュールに依存してはならない、どちらのモジュールも抽象に依存すべきである
- 抽象は、実装の詳細に依存してはならない、実装の詳細が抽象に依存すべきである
-> 要はインターフェースから依存関係を判定する
### 依存関係のコントロール
- Service Locatorパターン
	- スタートアップスクリプトに対象インスタンスを登録する
	- 依存関係が外部から見えづらい、テストの維持が難しくなる点からアンチパターンとされる
- IoC Containerパターン
	- IoC(Inversion of Control)制御の反転
		- ClassAControllerはClassBをnewする
		- 処理の流れはClassAController -> ClassB
		- これをClassB -> ClassAControllerの流れに変える事
	- DI(Dependency Injection)はIoCの一種
	- IoCコンテナとは
		- IoCをあるオブジェクト（コンテナ）にまとめたもの
		- 実際にController側で使用する場合は、コンテナから取得する
	- メリット
		- ソースコードの分離が可能
		- 単体テストの実装が容易になる
### Java Spring IoCコンテナ
- https://kazkn.com/post/2017/intro-spring-ioc-container/

## ファクトリ
### 概要
- 作る知識に特化したオブジェクト
### 用途（例）
- Users.User
- Users.IUserFactory
- UserClassで採番処理を実装したい時にnew User(userId, name)ではなく、new UserFactory(name)のように自動でプロパティを作成可能
### ファクトリとして機能するメソッド
- getterを利用せず、メソッド経由でnewする
- public Circle CreateCircle(CircleName cricleName);
- return new Circle(this.id, circleName);

## 集約
### 概要
- 変更の単位
- 関連するオブジェクト同士を線で囲う境界として定義
### デメテルの法則
- オブジェクト同士のメソッド呼び出しに秩序をもたらすガイドライン
	- オブジェクト自身
	- 引数として渡されたオブジェクト
	- インスタンス変数
	- 直接インスタンス化したオブジェクト
### 内部データを隠蔽する
- 通知オブジェクト（コードの記述量が増える）
### IDによるコンポジション（構成）
- 全てのプロパティにgetterを持たせるのではなく、ID等システマチックなもののみ公開する

## 仕様
### 概要
- オブジェクトの評価を行うオブジェクト
- specification

## アーキテクチャ
### 概要
- レイヤードアーキテクチャ
	- プレゼンテーション層
	- アプリケーション層
	- ドメイン層
	- インフラストラクチャ層
- ヘキサゴナルアーキテクチャ
- クリーンアーキテクチャ